{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","calcLuminosity","state","credits","victoryNum","toFixed","hanClickGo","setState","clickValue","cursorOnBoost","btnBoostFill","styles","btnBoostOn","btnBoostOff","btnBoostBorder","statNumClicks","hanClickBoost","statusMsg","messages","boostDenied","setTimeout","regular","boostsActive","statNumBoosts","hanClickReset","initialState","drain","setInterval","statStartTime","Date","now","markEndTime","className","statTimeToWin","this","topDisplay","id","btnBoost","onClick","style","cursor","backgroundImage","border","title","footer","clearInterval","backgroundColor","type","toString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d612491f.chunk.js","sourcesContent":["/*\nJoseph P. Pasaoa\nReact Clicker Game Lab\n*/\n\n\n/* TO DO\nadd high score system\nadd scores record grid\nmobile ui responsiveness\n*/\n\n\n/* IMPORTS */\nimport React from 'react';\nimport './App.css';\n// const { log } = require('./utils/helpers.js');\n\n\n/* EXEC */\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.victoryNum = 100;\n    this.messages = {\n      regular: <p className='msg'>All systems go. Click for credits!</p>,\n      boostDenied: <p className='msg msg--red'>Not enough credits. Boost DENIED.</p>\n    };\n    this.styles = {\n      btnBoostOff: 'linear-gradient(to bottom, #525252 0%,#000 100%)',\n      btnBoostOn: 'linear-gradient(to bottom, #e7ea12 0%,#f16d11 100%)'\n    };\n    this.initialState = {\n      credits: 0,\n      clickValue: 1,\n      boostsActive: 0,\n      statusMsg: this.messages.regular,\n      cursorOnBoost: 'not-allowed',\n      btnBoostFill: this.styles.btnBoostOff,\n      btnBoostBorder: '#333',\n      drain: setInterval(() => {\n        if (this.state.credits > 0) {\n          this.setState({\n              credits: this.state.credits - 1,\n              cursorOnBoost: this.state.credits - 1 >= 10 ? 'pointer' : 'not-allowed',\n              btnBoostFill: this.state.credits - 1 >= 10 ? this.styles.btnBoostOn : this.styles.btnBoostOff,\n              btnBoostBorder: this.state.credits - 1 >= 10 ? 'orange' : '#333'\n          });\n        }\n      }, 1000),\n      statNumClicks: 0,\n      statNumBoosts: 0,\n      statStartTime: Date.now(),\n      statTimeToWin: null\n    };\n    this.state = this.initialState;\n  }\n\n  calcLuminosity = () => {\n    return (this.state.credits / this.victoryNum * 100).toFixed(2) + '%';\n  }\n\n  hanClickGo = () => {\n    this.setState({\n        credits: this.state.credits + this.state.clickValue,\n        cursorOnBoost: this.state.credits + this.state.clickValue >= 10 ? 'pointer' : 'not-allowed',\n        btnBoostFill: this.state.credits + this.state.clickValue >= 10 ? this.styles.btnBoostOn : this.styles.btnBoostOff,\n        btnBoostBorder: this.state.credits + this.state.clickValue >= 10 ? 'orange' : '#333',\n        statNumClicks: this.state.statNumClicks + 1\n    });\n  }\n\n  hanClickBoost = () => {\n    if (this.state.credits < 10) {\n      this.setState({\n          statusMsg: this.messages.boostDenied\n      });\n      setTimeout(() => {\n          this.setState({\n              statusMsg: this.messages.regular\n          })\n      }, 2000);\n    } else {\n      this.setState({\n          credits: this.state.credits - 10,\n          clickValue: this.state.clickValue + 1,\n          boostsActive: this.boostsActive + 1,\n          cursorOnBoost: this.state.credits - 10 >= 10 ? 'pointer' : 'not-allowed',\n          btnBoostFill: this.state.credits - 10 >= 10 ? this.styles.btnBoostOn : this.styles.btnBoostOff,\n          btnBoostBorder: this.state.credits - 10 >= 10 ? 'orange' : '#333',\n          statNumBoosts: this.state.statNumBoosts + 1\n      });\n    }\n  }\n\n  hanClickReset = () => {\n    this.setState(this.initialState);\n    this.setState({\n        drain: setInterval(() => {\n          if (this.state.credits > 0) {\n            this.setState({\n                credits: this.state.credits - 1\n            });\n          }\n        }, 1000),\n        statStartTime: Date.now()\n    });\n  }\n\n  markEndTime = () => {\n    return (Date.now() - this.state.statStartTime) / 1000;\n  }\n\n  render() {\n    const { \n      credits, \n      clickValue, \n      boostsActive, \n      statusMsg, \n      cursorOnBoost, \n      btnBoostFill, \n      btnBoostBorder, \n      drain,\n      statNumClicks,\n      statNumBoosts\n    } = this.state;\n\n    const topDisplay =\n      <div id=\"topDisplay\">\n        <p id=\"score\">{credits}</p>\n        <p id=\"credits-label\">credits</p>\n      </div>\n\n    const btnBoost = \n      <button \n        id=\"btnBoost\" \n        onClick={this.hanClickBoost} \n        style={{cursor: cursorOnBoost, backgroundImage: btnBoostFill, border: `solid 3px ${btnBoostBorder}`}}\n      >\n        +boost!<br />{`(-10 creds)`}\n      </button>\n\n    const title =\n      <h1>Click, <br />Pass <br />the Cent</h1>\n\n    const footer =\n      <footer>Copyright Â©2019 Joseph P. Pasaoa. All rights reserved.</footer>\n\n\n    if (credits >= this.victoryNum) {\n      const statTimeToWin = this.markEndTime();\n      clearInterval(drain);\n      return (\n        <div className=\"App\">\n          <div id=\"flex-base\">\n\n            {topDisplay}\n            <h2>Victory!</h2>\n            <p className=\"msg msg--grats\">You made 100 credits! Congratulations!</p>\n            <button id=\"btnReset\" onClick={this.hanClickReset}>Try again?</button>\n            <p className=\"msg\">stats ~</p>\n            Time: {statTimeToWin}, Clicks: {statNumClicks}, Boosts: {statNumBoosts}\n            {title}\n            {footer}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\" style={{backgroundColor: `hsl(0, 0%, ${this.calcLuminosity()}`}}>\n        <div id=\"flex-base\">\n\n          {topDisplay}\n          <div id=\"controls\">\n            {credits >= 10 && boostsActive < 1 ? btnBoost : btnBoost}\n            <button id=\"btnGo\" onClick={this.hanClickGo} type=\"button\"><span>{`+${clickValue.toString()}`}</span> credits</button>\n          </div>\n          {statusMsg}\n          {title}\n          {footer}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n/* EXPORT */\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}